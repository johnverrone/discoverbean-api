Elm.Login = Elm.Login || {};
Elm.Login.make = function (_elm) {
   "use strict";
   _elm.Login = _elm.Login || {};
   if (_elm.Login.values) return _elm.Login.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var LoginResponse = function (a) {    return {ctor: "LoginResponse",_0: a};};
   var Login = {ctor: "Login"};
   var UpdatePassword = function (a) {    return {ctor: "UpdatePassword",_0: a};};
   var UpdateUsername = function (a) {    return {ctor: "UpdateUsername",_0: a};};
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.header,_U.list([$Html$Attributes.id("header")]),_U.list([A2($Html.h1,_U.list([]),_U.list([$Html.text("Login")]))]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("text")
                      ,$Html$Attributes.placeholder("username")
                      ,$Html$Attributes.value(model.username)
                      ,A3($Html$Events.on,"input",$Html$Events.targetValue,function (_p0) {    return A2($Signal.message,address,UpdateUsername(_p0));})]),
              _U.list([]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("password")
                      ,$Html$Attributes.placeholder("password")
                      ,$Html$Attributes.value(model.password)
                      ,A3($Html$Events.on,"input",$Html$Events.targetValue,function (_p1) {    return A2($Signal.message,address,UpdatePassword(_p1));})]),
              _U.list([]))
              ,A2($Html.button,_U.list([A2($Html$Events.onClick,address,Login)]),_U.list([$Html.text("Login")]))]));
   });
   var NoOp = {ctor: "NoOp"};
   var Account = F4(function (a,b,c,d) {    return {admin: a,email: b,username: c,name: d};});
   var decodeLoginResponse = A5($Json$Decode.object4,
   Account,
   A2($Json$Decode._op[":="],"admin",$Json$Decode.bool),
   A2($Json$Decode._op[":="],"email",$Json$Decode.string),
   A2($Json$Decode._op[":="],"username",$Json$Decode.string),
   A2($Json$Decode._op[":="],"name",$Json$Decode.string));
   var postLogin = function (model) {
      return $Effects.task(A2($Task.map,
      LoginResponse,
      A2($Task.onError,
      A3($Http.post,
      decodeLoginResponse,
      "api/login",
      $Http.string(A2($Basics._op["++"],
      "{username: ",
      A2($Basics._op["++"],model.username,A2($Basics._op["++"],", password: ",A2($Basics._op["++"],model.password,"}")))))),
      function (err) {
         return $Task.succeed(A4(Account,false,"","",""));
      })));
   };
   var update = F2(function (action,model) {
      var _p2 = action;
      switch (_p2.ctor)
      {case "NoOp": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "UpdateUsername": return {ctor: "_Tuple2",_0: _U.update(model,{username: _p2._0}),_1: $Effects.none};
         case "UpdatePassword": return {ctor: "_Tuple2",_0: _U.update(model,{password: _p2._0}),_1: $Effects.none};
         case "Login": return {ctor: "_Tuple2",_0: model,_1: postLogin(model)};
         default: return {ctor: "_Tuple2",_0: model,_1: $Effects.none};}
   });
   var Model = F2(function (a,b) {    return {username: a,password: b};});
   var init = {ctor: "_Tuple2",_0: A2(Model,"",""),_1: $Effects.none};
   return _elm.Login.values = {_op: _op
                              ,Model: Model
                              ,Account: Account
                              ,init: init
                              ,NoOp: NoOp
                              ,UpdateUsername: UpdateUsername
                              ,UpdatePassword: UpdatePassword
                              ,Login: Login
                              ,LoginResponse: LoginResponse
                              ,update: update
                              ,view: view
                              ,postLogin: postLogin
                              ,decodeLoginResponse: decodeLoginResponse};
};